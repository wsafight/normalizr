// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ObjectSchema denormalization denormalizes an object 1`] = `
{
  "user": {
    "id": 1,
    "name": "Nacho",
  },
}
`;

exports[`ObjectSchema denormalization denormalizes an object 2`] = `
{
  "user": Immutable.Map {
    "id": 1,
    "name": "Nacho",
  },
}
`;

exports[`ObjectSchema denormalization denormalizes an object 3`] = `
Immutable.Map {
  "user": Immutable.Map {
    "id": 1,
    "name": "Nacho",
  },
}
`;

exports[`ObjectSchema denormalization denormalizes an object that contains a property representing a an object with an id of zero 1`] = `
{
  "user": {
    "id": 0,
    "name": "Chancho",
  },
}
`;

exports[`ObjectSchema denormalization denormalizes an object that contains a property representing a an object with an id of zero 2`] = `
{
  "user": Immutable.Map {
    "id": 0,
    "name": "Chancho",
  },
}
`;

exports[`ObjectSchema denormalization denormalizes an object that contains a property representing a an object with an id of zero 3`] = `
Immutable.Map {
  "user": Immutable.Map {
    "id": 0,
    "name": "Chancho",
  },
}
`;

exports[`ObjectSchema denormalization denormalizes plain object shorthand 1`] = `
{
  "user": {
    "id": 1,
    "name": "Jane",
  },
}
`;

exports[`ObjectSchema denormalization denormalizes plain object shorthand 2`] = `
{
  "user": Immutable.Map {
    "id": 1,
    "name": "Jane",
  },
}
`;

exports[`ObjectSchema denormalization denormalizes plain object shorthand 3`] = `
Immutable.Map {
  "user": Immutable.Map {
    "id": 1,
    "name": "Jane",
  },
}
`;

exports[`ObjectSchema normalization filters out undefined and null values 1`] = `
{
  "entities": {
    "user": {
      "1": {
        "id": "1",
      },
      "undefined": {},
    },
  },
  "result": {
    "bar": "1",
  },
}
`;

exports[`ObjectSchema normalization normalizes an object 1`] = `
{
  "entities": {
    "user": {
      "1": {
        "id": 1,
      },
    },
  },
  "result": {
    "user": 1,
  },
}
`;

exports[`ObjectSchema normalization normalizes plain objects as shorthand for ObjectSchema 1`] = `
{
  "entities": {
    "user": {
      "1": {
        "id": 1,
      },
    },
  },
  "result": {
    "user": 1,
  },
}
`;
